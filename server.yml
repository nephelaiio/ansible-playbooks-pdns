---
- name: Configure pdns authoritative server

  hosts: pdns_servers

  become: yes

  vars:

    pdns_recursors: []
    pdns_url: "https://{{ ansible_fqdn }}"
    pdns_hostname: "{{ pdns_url | urlsplit('hostname') }}"
    pdns_api_proto: http
    pdns_api_port: 8081
    pdns_psql_user: pdns
    pdns_psql_db: pdns
    pdns_master_ips: "{{ hostvars.values() | selectattr('pdns_master', 'defined') | selectattr('pdns_master', 'equalto', True) | map(attribute='ansible_default_ipv4') | map(attribute='address') | list }}"
    pdns_soa_master: "{{ ansible_fqdn }}" 
    pdns_soa_ttl: 3600
    pdns_config:
      api: yes
      api-key: "{{ pdns_api_key }}"
      webserver: yes
      webserver-address: 127.0.0.1
      webserver-port: "{{ pdns_api_port }}"
      webserver-allow-from: 127.0.0.1
      dnsupdate: no
      master: "{{ (pdns_master | default('no')) | bool }}"
      slave: "{{ not ((pdns_master | default('no')) | bool) }}"
      disable-axfr: "{{ not ((pdns_master | default('no')) | bool) }}"
      allow-axfr-ips: "{{ play_hosts | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | join(',') }}"
      setuid: pdns
      setgid: pdns
      local-address: "{{ ansible_host }}:53"
      security-poll-suffix: ''
      default-soa-name: "{{ play_hosts | first | map(attribute='inventory_hostname') }}"
      default-soa-mail: "{{ pdns_soa_master }}"
      default-ttl: "{{ pdns_soa_ttl }}"
    pdns_backends:
      gpgsql:
        user: "{{ pdns_psql_user }}"
        host: 127.0.0.1
        password: "{{ pdns_psql_pass }}"
        dbname: "{{ pdns_psql_db }}"

    nginx_install_from: os_repository
    nginx_cleanup_config_path:
      - /etc/nginx/conf.d
      - /etc/nginx/sites-enabled/default
      - /etc/nginx/sites-available/default
    nginx_main_template:
      conf_file_name: nginx.conf
      conf_file_location: /etc/nginx/
      user: www-data
      worker_processes: auto
      error_level: warn
      worker_connections: 1024
      http_enable: true
      http_settings:
        keepalive_timeout: 60
        cache: false
        rate_limit: false
        keyval: false
      stream_enable: false
      http_global_autoindex: false
      server_tokens: off
    nginx_http_template:
      default:
        port: 80
        server_name: "{{ acme_certificate_domain }}"
        conf_file_name: "{{ acme_certificate_domain }}.http.conf"
        https_redirect: yes
      pdns:
        port: 443
        server_name: "{{ acme_certificate_domain }}"
        conf_file_name: "{{ acme_certificate_domain }}.https.conf"
        ssl:
          key: "{{ acme_certificate_keyfile }}"
          cert: "{{ acme_certificate_chainfile }}"
          protocols: TLSv1.2 TLSv1.3
          ciphers: HIGH:!aNULL:!MD5
        reverse_proxy:
          locations:
            default:
              location: /
              proxy_pass: http://pdns
              proxy_set_header:
                header_host:
                  name: Host
                  value: $host
                header_upgrade:
                  name: Upgrade
                  value: $http_upgrade
                header_connection:
                  name: Connection
                  value: Upgrade
                header_x_forwarded_for:
                  name: X-Forwarded-For
                  value: $proxy_add_x_forwarded_for
        upstreams:
          pdns:
            name: pdns
            lb_method: least_conn
            zone_name: pdns
            zone_size: 32k
            sticky_cookie: false
            servers:
              address: 127.0.0.1
              port: "{{ pdns_api_port }}"
              weight: 1
              health_check: max_fails=3 fail_timeout=5s

    acme_certificate_domain: "{{ awx_url | urlsplit('hostname') }}"
    acme_certificate_chainfile: "/etc/nginx/{{ acme_certificate_domain }}.chain.crt"
    acme_certificate_keyfile: "/etc/nginx/{{ acme_certificate_domain }}.key"
    acme_certificate_add_ca: yes
    acme_certificate_aws_accesskey_id: "{{ aws_access_key_id | default(lookup('env', 'AWS_ACCESS_KEY_ID')) }}"
    acme_certificate_aws_accesskey_secret: "{{ aws_secret_access_key | default(lookup('env', 'AWS_SECRET_ACCESS_KEY')) }}"

  roles:

    - nephelaiio.plugins
    - nephelaiio.pip
    - bertvv.hosts

  pre_tasks:

    - block:

        - name: gather recursor metadata
          setup:
          delegate_to: "{{ item }}"
          delegate_facts: yes
          loop: "{{ pdns_recursors }}"
          tags:
            - always

        - name: build recursor host metadata
          set_fact:
            hosts_entries: "{{ (hosts_entries | default([])) | union([recursor_host]) }}"
          loop_control:
            label: "{{ item }}"
          vars:
            recursor_host:
              name: "{{ hostvars[item]['ansible_fqdn'] }}"
              ip: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
          loop: "{{ pdns_recursors }}"
          tags:
            - always

      run_once: yes

  tasks:

    - name: install python dns modules
      pip:
        name: dnspython
        state: latest

    - name: install dns utilities
      apt:
        name: dnsutils
        state: latest

    - name: install postgresql
      include_role:
        name: geerlingguy.postgresql
      vars:
        postgresql_databases:
          - name: "{{ pdns_backends.gpgsql.dbname }}"
        postgresql_users:
          - name: "{{ pdns_backends.gpgsql.user }}"
            password: "{{ pdns_backends.gpgsql.password }}"
            encrypted: yes

    - name: initialize database schema
      postgresql_query:
        db: "{{ pdns_backends.gpgsql.dbname }}"
        query: "{{ lookup('template', 'schema.j2.sql') }}"
      become_user: postgres

    - name: set {{ pdns_backends.gpgsql.user }} table access
      postgresql_privs:
        db: "{{ pdns_backends.gpgsql.dbname }}"
        role: "{{ pdns_backends.gpgsql.user }}"
        objs: ALL_IN_SCHEMA
        privs: SELECT,INSERT,UPDATE,DELETE
        type: table
      become_user: postgres

    - name: set {{ pdns_backends.gpgsql.user }} schema access
      postgresql_privs:
        db: "{{ pdns_backends.gpgsql.dbname }}"
        role: "{{ pdns_backends.gpgsql.user }}"
        objs: ALL_IN_SCHEMA
        privs: USAGE
        type: sequence
      become_user: postgres

    - name: create temporary directory
      tempfile:
        state: directory
        prefix: pdns
      register: tmpdir
      changed_when: false

    - name: disable systemd-resolved
      service:
        name: systemd-resolved
        state: stopped
        enabled: no
      register: systemd_resolved_svc

    - name: bootstrap resolv.conf
      include_role:
        name: ahuffman.resolv
      vars:
        resolv_nameservers: "{{ nameservers }}"
        resolv_domain: "{{ base_domain }}"
        resolv_options:
          - timeout:2
          - rotate
      when: systemd_resolved_svc.changed

    - name: install powerdns
      include_role:
        name: PowerDNS.pdns
      vars:
        pdns_install_repo: "{{ pdns_auth_powerdns_repo_master }}"

    - meta: flush_handlers

    - name: install nginx
      import_role:
        name: nginxinc.nginx
      vars:
        nginx_cleanup_config: no
        nginx_http_template_enable: no
        nginx_main_template_enable: no

    - name: generate certificates
      import_role:
        name: nephelaiio.acme_certificate_route53

    - name: configure nginx
      import_role:
        name: nginxinc.nginx
      vars:
        nginx_cleanup_config: yes
        nginx_http_template_enable: yes
        nginx_main_template_enable: yes

    - name: query pdns zones
      uri:
        url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones"
        method: GET
        headers:
          X-API-Key: "{{ pdns_api_key }}"
      register: pdns_zones_query
      tags:
        - always

    - name: build list of existing zones
      set_fact:
        pdns_zones: "{{ pdns_zones_query.json | map(attribute='id') | list }}"
      tags:
        - always

    - name: create zones
      command:
        "pdnsutil create-zone {{ zone_name }} {{ zone_ns }}"
      vars:
        zone: "{{ item.value }}"
        zone_name: "{{ zone.name }}."
        zone_ns: "{{ zone.ns | map('map_format', '%s.') | list | first | string }}"
      loop_control:
        label: "{{ zone_name }}"
      loop: "{{ dns_zones | dict2items }}"
      when: zone_name not in pdns_zones
      tags:
        - zones

    - name: set zone types
      command:
        "pdnsutil set-kind {{ zone_name }} {{ zone_kind }}"
      vars:
        zone: "{{ item.value }}"
        zone_name: "{{ zone.name }}."
        zone_kind: "{{ 'master' if pdns_master else 'slave' }}"
      loop_control:
        label: "{{ zone_name }}"
      loop: "{{ dns_zones | dict2items }}"
      tags:
        - zones

    - name: set zone masters
      command:
        "pdnsutil change-slave-zone-master {{ zone_name }} {{ pdns_master_ips | join(' ') }}"
      vars:
        zone: "{{ item.value }}"
        zone_name: "{{ zone.name }}."
        zone_kind: "{{ 'master' if pdns_master else 'slave' }}"
      loop_control:
        label: "{{ zone_name }}"
      loop: "{{ dns_zones | dict2items }}"
      tags:
        - zones

    - meta: flush_handlers

    - name: update pdns dns record
      uri:
        url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones/{{ zone }}"
        method: PATCH
        return_content: yes
        body_format: json
        body:
          rrsets:
            - name: "{{ fqdn }}"
              type: A
              ttl: "{{ dns_ttl }}"
              changetype: REPLACE
              records:
                - content: "{{ ansible_default_ipv4.address }}"
                  disabled: no
                  set-ptr: no
                  comments: []
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        fqdn: "{{ letsencrypt_domain }}."
        record: "{{ letsencrypt_record }}"
        zone: "{{ letsencrypt_zone }}"
      tags:
        - records

    - block:

        - name: query pdns zones
          uri:
            url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones"
            method: GET
            headers:
              X-API-Key: "{{ pdns_api_key }}"
          register: pdns_zones_query
          tags:
            - always

        - name: build list of existing zones
          set_fact:
            pdns_zones: "{{ pdns_zones_query.json | map(attribute='id') | list }}"
          tags:
            - always

        - name: query resolver delegations
          uri:
            url: "https://{{ item }}/api/v1/servers/localhost/zones"
            method: GET
            headers:
              X-API-Key: "{{ pdns_rec_api_key }}"
            validate_certs: no
          loop: "{{ pdns_recursors }}"
          register: pdns_recursor_zones
          tags:
            - recursors

        - name: delete resolver delegations
          uri:
            url: "https://{{ recursor }}/api/v1/servers/localhost/zones/{{ zone_id }}"
            method: DELETE
            status_code:
              - 200
              - 204
            headers:
              X-API-Key: "{{ pdns_rec_api_key }}"
          loop_control:
            label: "{{ recursor }}: {{ zone_name }}"
          vars:
            recursor: "{{ item.0 }}"
            zone_name: "{{ item.1 }}"
            recursor_zones: "{{ pdns_recursor_zones.results | selectattr('item', 'equalto', recursor) | first }}"
            zone_id: "{{ (recursor_zones.json | selectattr('name', 'match', zone_name + '\\.?') | first).id | default('') }}"
          loop: "{{ pdns_recursors | product(pdns_domains | map(attribute='name') | list) | list }}"
          when: zone_id != ''
          tags:
            - recursors

        - name: create resolver delegations
          uri:
            url: "https://{{ recursor }}/api/v1/servers/localhost/zones"
            method: POST
            status_code:
              - 200
              - 201
            body_format: json
            body:
              name: "{{ zone_name }}."
              type: Zone
              kind: Forwarded
              servers: "{{ play_hosts | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list }}"
              recursion_desired: yes
            headers:
              X-API-Key: "{{ pdns_rec_api_key }}"
          loop_control:
            label: "{{ recursor }}: {{ zone_name }}"
          vars:
            recursor: "{{ item.0 }}"
            zone_name: "{{ item.1 }}"
          loop: "{{ pdns_recursors | product(pdns_domains | map(attribute='name') | list) | list }}"
          tags:
            - recursors

      run_once: yes
